library(devtools)
use_package("GenomicRanges")
use_r("Used_fn")
devtools::load_all(".")
to_make_gr_object_chr_base_loc()
to_make_gr_object_chr_base_loc(chr_base_loc_vec = c("chr2:150-151"),column_name = "Peak_id")
?GRanges
devtools::load_all(".")
to_make_gr_object_chr_base_loc(chr_base_loc_vec = c("chr2:150-151"),column_name = "Peak_id")
devtools::load_all(".")
to_make_gr_object_chr_base_loc(chr_base_loc_vec = c("chr2:150-151"),column_name = "Peak_id")
?to_make_gr_object_chr_base_loc
devtools::load_all(".")
to_make_gr_object_chr_base_loc()
?to_make_gr_object_chr_base_loc()
devtools::load_all(".")
?to_make_gr_object_chr_base_loc
library(Usefn)
example(to_make_gr_object_chr_base_loc,package = "GenomicRanges")
?to_make_gr_object_chr_base_loc
library(Usefn)
example(to_make_gr_object_chr_base_loc,package = "Usefn")
devtools::load_all(".")
library(Usefn)
?unique_grobject_metacol
unique_grobject_metacol()
devtools::load_all(".")
unique_grobject_metacol(genomic_coord = c("chr2:15000-15500"),metacolumn_name = "Peak_id")
?unique_grobject_metacol
devtools::load_all(".")
?unique_grobject_metacol
library(Usefn)
example(unique_grobject_metacol,package = "Usefn")
devtools::load_all(".")
library(Usefn)
example(unique_grobject_metacol,package = "Usefn")
?unique_grobject_metacol
devtools::load_all(".")
?to_overlap_grange_object
to_overlap_grange_object
devtools::load_all(".")
to_get_overlap_bw_gr_from_peakids()
?to_get_overlap_bw_gr_from_peakids
devtools::load_all(".")
?to_overlap_grange_object
?to_find_nearest_dist_grange_object
?to_get_overlap_bw_gr_from_peakids
?to_get_bed_df_peaks_from_peak_id_vector
to_overlap_grange_object()
to_overlap_grange_object
to_find_nearest_dist_grange_object
to_get_overlap_bw_gr_from_peakids
to_get_bed_df_peaks_from_peak_id_vector
devtools::load_all(".")
library(Usefn)
unique_grobject_metacol
to_overlap_grange_object
to_find_nearest_dist_grange_object
modify_string
devtools::load_all(".")
modify_string
modify_string(x = "a_b",delimtter = "_",position = 1)
to_get_bed_df_peaks_from_peak_id_vector(input_peak_id_vector = c("chr2:111-112"))
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = c("ch2:110-300"),input_genomic_coord2 = c("ch2:115-120"),input1_colname = "Q1",input2_colname = "Q2)
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = c("ch2:110-300"),input_genomic_coord2 = c("ch2:115-120"),input1_colname = "Q1",input2_colname = "Q2")
devtools::load_all(".")
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = c("ch2:110-300"),input_genomic_coord2 = c("ch2:115-120"),input1_colname = "Q1",input2_colname = "Q2")
devtools::load_all(".")
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = c("ch2:110-300"),input_genomic_coord2 = c("ch2:115-120"),input1_colname = "Q1",input2_colname = "Q2")
devtools::load_all(".")
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = c("ch2:110-300"),input_genomic_coord2 = c("ch2:115-120"),input1_colname = "Q1",input2_colname = "Q2")
unique_grobject_metacol(genomic_coord = c("ch2:110-300"),metacolumn_name = "Q1")
to_overlap_grange_object(gr1 = unique_grobject_metacol(genomic_coord = c("ch2:110-300"),metacolumn_name = "Q1"),gr2 = unique_grobject_metacol(genomic_coord = c("ch2:110-255"),metacolumn_name = "Q2"),gr1_col = "Q1",gr2_col = "Q2")
?queryHits
GenomicRanges::queryHits
devtools::load_all(".")
to_overlap_grange_object(gr1 = unique_grobject_metacol(genomic_coord = c("ch2:110-300"),metacolumn_name = "Q1"),gr2 = unique_grobject_metacol(genomic_coord = c("ch2:110-255"),metacolumn_name = "Q2"),gr1_col = "Q1",gr2_col = "Q2")
??queryHits
a = findOverlaps(gr1 = unique_grobject_metacol(genomic_coord = c("ch2:110-300"),metacolumn_name = "Q1"),gr2 = unique_grobject_metacol(genomic_coord = c("ch2:110-255"),metacolumn_name = "Q2"))
a = GenomicRanges::findOverlaps(gr1 = unique_grobject_metacol(genomic_coord = c("ch2:110-300"),metacolumn_name = "Q1"),gr2 = unique_grobject_metacol(genomic_coord = c("ch2:110-255"),metacolumn_name = "Q2"))
GenomicRanges::findOverlaps(gr1 = unique_grobject_metacol(genomic_coord = c("ch2:110-300"),metacolumn_name = "Q1"),gr2 = unique_grobject_metacol(genomic_coord = c("ch2:110-255"),metacolumn_name = "Q2"))
devtools::load_all(".")
library(Usefn)
library(Usefn)
GenomicRanges::findOverlaps(gr1 = unique_grobject_metacol(genomic_coord = c("ch2:110-300"),metacolumn_name = "Q1"),gr2 = unique_grobject_metacol(genomic_coord = c("ch2:110-255"),metacolumn_name = "Q2"))
?findOverlaps
IRanges::findOverlaps
IRanges::queryHits
IRanges::elementMetadata
GenomicRanges::elementMetadata
pintersect
width
devtools::load_all(".")
IRanges::findOverlaps(gr1 = unique_grobject_metacol(genomic_coord = c("ch2:110-300"),metacolumn_name = "Q1"),gr2 = unique_grobject_metacol(genomic_coord = c("ch2:110-255"),metacolumn_name = "Q2"))
devtools::load_all(".")
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = c("ch2:110-300"),input_genomic_coord2 = c("ch2:110-255"),input1_colname = "Q1",input2_colname = "Q2")
255-110
to_overlap_grange_object(gr1 = unique_grobject_metacol(genomic_coord = c("ch2:110-300"),metacolumn_name = "Q1"),gr2 = unique_grobject_metacol(genomic_coord = c("ch2:110-255"),metacolumn_name = "Q2"),gr1_col = "Q1",gr2_col = "Q2")
devtools::load_all(".")
to_overlap_grange_object(gr1 = unique_grobject_metacol(genomic_coord = c("ch2:110-300"),metacolumn_name = "Q1"),gr2 = unique_grobject_metacol(genomic_coord = c("ch2:110-255"),metacolumn_name = "Q2"),gr1_col = "Q1",gr2_col = "Q2")
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = c("ch2:110-300"),input_genomic_coord2 = c("ch2:110-255"),input1_colname = "Q1",input2_colname = "Q2")
Iranges::distanceToNearest
IRanges::distanceToNearest
devtools::load_all(".")
to_get_bed_df_peaks_from_peak_id_vector(input_peak_id_vector = c("ch2:111-112"))
devtools::load_all(".")
?fisher.test
?getBM
?rowVars
??rowVars
devtools::load_all(".")
library(Usefn)
compute_pca
library(Usefn)
usethis::use_package(package = c("matrixStats","GenomicRanges","pheatmap"),type = "Imports")
usethis::use_package(package = "matrixStats",type = "Imports")
usethis::use_package(package = "pheatmap",type = "Imports")
usethis::use_package(package = "matrixStats",type = "Depends")
usethis::use_package(package = "DESeq2",type = "Depends")
devtools::load_all(".")
library(Usefn)
usethis::use_github()
library(Usefn)
load("/Users/daga/Documents/Projects/Autoimmune/JIA/dds_rld_objects/JIA_SFvsPBMC_ovelap2_with_nosummit_no_sex_stdchr.rda")
## JIA 26730 peaks
count_matrix =  assay(rld)
meta_df =  as.data.frame(colData(rld))
View(meta_df)
meta_df$Tissue = factor(meta_df$Tissue,levels = c("SF", "PB"))
all(colnames(count_matrix) == rownames(meta_df))
data_orginal = assay(rld)
cleaned_data <- removeBatchEffect(data_orginal,
batch = meta_df$Batch,
design =  model.matrix( ~ meta_df$Tissue))
library(limma)
compute_pca
compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
library(Usefn)
load("/Users/daga/Documents/Projects/Autoimmune/JIA/dds_rld_objects/JIA_SFvsPBMC_ovelap2_with_nosummit_no_sex_stdchr.rda")
count_matrix =  assay(rld)
meta_df =  as.data.frame(colData(rld))
meta_df$Tissue = factor(meta_df$Tissue,levels = c("SF", "PB"))
all(colnames(count_matrix) == rownames(meta_df))
compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
View(meta_df)
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3,outdir = "~/Deskop_test.pdf",logTransform = TRUE)
devtools::load_all(".")
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3,outdir = "~/Deskop_test.pdf",logTransform = TRUE)
devtools::load_all(".")
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3,outdir = "~/Deskop_test.pdf",logTransform = TRUE)
devtools::load_all(".")
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3,outdir = "~/Deskop_test.pdf",logTransform = TRUE)
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3,outdir = /Deskop_test.pdf",logTransform = TRUE)
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3,outdir = "~/Desktop/test.pdf",logTransform = TRUE)
draw_heatmap_top_peaks(data_mat = count_matrix,ntop = 1000,col_select = c("Tissue","Batch"),meta_df = meta_df,outfn = "~/Desktop/test.pdf",rownorm = FALSE)
load("/Users/daga/Documents/Projects/Autoimmune/JIA/RNA_seq/Process_with_merge/DE_result/JIA.SF_untreated_vs_HC.PBMC_untreated_de_result.RData")
maplot(res = res)
head(as.data.frame(res))
res$baseMean
plot(res$baseMean, res$log2FoldChange)
plot(res$baseMean, res$log2FoldChange,log="x")
? with
devtools::load_all(".")
maplot(res = res,thresh = 0.05)
devtools::load_all(".")
maplot(res = res,thresh = 0.05)
maplot(res = res,thresh = 0.05,labelsig = FALSE)
volcanoplot(res = res)
devtools::load_all(".")
volcanoplot(res = res)
head(res)
to_add_gene_symbol_ENSEMBL(input_ensembl_vector = c("ENSG00000279457"))
library(Usefn)
usethis::use_readme_md()
``` r
``` r
``` r
```
library(Usefn)
devtools::load_all(".")
?to_get_bed_df_peaks_from_peak_id_vector
library(Usefn)
vignette("Usefn_example", package="Usefn")
? vignette
vignette("Usefn_examples", package="Usefn")
vignette("Usefn_examples.pdf", package="Usefn")
%\VignetteIndexEntry{<Usefn Examples>}
%\VignetteIndexEntry{Usefn Examples}
library(Usefn)
vignette("Usefn_examples.pdf",package = Usefn)
vignette("Usefn_examples.pdf",package = "Usefn")
vignette(Usefn_examples,package = "Usefn")
library(Usefn)
knitr::opts_chunk$set(echo = TRUE)
load("/Users/daga/Documents/Projects/Autoimmune/JIA/RNA_seq/Process_with_merge/DE_result/HC.PBMC_treatment_HC.PBMC_notreatment_de_result.RData")
load("/Users/daga/Documents/Projects/Autoimmune/JIA/RNA_seq/Process_with_merge/DE_result/HC.PBMC_treatment_HC.PBMC_notreatment_de_result.RData")
meta_df =  as.data.frame(colData(rld))
data_orginal =  assay(rld)
data_orginal =  assay(rld)
load("/Users/daga/Documents/Projects/Autoimmune/JIA/dds_rld_objects/JIA_SFvsPBMC_ovelap2_with_nosummit_no_sex_stdchr.rda")
data_orginal =  assay(rld)
meta_df =  as.data.frame(colData(rld))
meta_df$Tissue = factor(meta_df$Tissue,levels = c("SF", "PB"))
meta_df = meta_df[,c("SampleID","Tissue","Condition")]
#all(colnames(data_orginal) == rownames(meta_df))
data_orginal = assay(rld)
count_matrix <- limma::removeBatchEffect(data_orginal, batch = meta_df$Batch,design =  model.matrix( ~ meta_df$Tissue))
View(meta_df)
View(meta_df)
meta_df =  as.data.frame(colData(rld))
meta_df$Tissue = factor(meta_df$Tissue,levels = c("SF", "PB"))
View(meta_df)
meta_df = meta_df[,c("SampleID","Tissue","Condition","Batch")]
View(meta_df)
data_orginal =  assay(rld)
hist(res$pvalue)
count_matrix =  assay(rld)
usethis::use_data(count_matrix)
usethis::use_data(meta_df)
usethis::use_data(res)
usethis::use_r(data)
usethis::use_r("data")
dim(count_matrix)
devtools::load_all(".")
usethis::use_data(as.data.frame(res))
res_df = as.data.frame(res)
usethis::use_data(res_df)
devtools::load_all(".")
devtools::load_all(".")
data("res_df")
data("count_matrix")
data("meta_df")
?meta_df
library(Usefn)
?meta_df
??count_matrix
??res_df
devtools::load_all(".")
?meta_df
?count_matrix
?res_df
devtools::load_all(".")
?res_df
usethis::use_vignette(name = "usefn_examples",title = "Usefn functions with examples")
library(Usefn)
enhancer1 = c("chr2:1002-1500","chr1:30000-38000","chr4:70000-78252")
enhancer2 = c("chr2:1100-1200","chr1:37655-38000" ,"chr4:50000-57122")
## To find overlap between two vectors of genomic coordinates
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = enhancer1,input_genomic_coord2 = enhancer2,input1_colname = "enhancer1",input2_colname ="enhancer2")
### To get bed format of genomic coordinates
to_get_bed_df_peaks_from_peak_id_vector(input_peak_id_vector = enhancer1)
?to_get_bed_df_peaks_from_peak_id_vector
library(Usefn)
enhancer1 = c("chr2:1002-1500","chr1:30000-38000","chr4:70000-78252")
enhancer2 = c("chr2:1100-1200","chr1:37655-38000" ,"chr4:50000-57122")
## To find overlap between two vectors of genomic coordinates
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = enhancer1,input_genomic_coord2 = enhancer2,input1_colname = "enhancer1",input2_colname ="enhancer2")
### To get bed format of genomic coordinates
to_get_bed_df_peaks_from_peak_id_vector(input_peak_id_vector = enhancer1,bed_file = FALSE,out_fn = "")
#### Data used: Normalised rld transformed count matrix of enhancer(peaks) in two tissues (synovial, blood) for juvenile arthritis patients
data(count_matrix)
data(meta_df)
### computing pca
pca_list = compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
### PCA loadings and covariates
head(pca_list$PCA_meta_df)
### PCAs and variability explained
head(pca_list$perc_var)
#### Plotting PCA
plot(pca_list$PCA_meta_df$PC1,pca_list$PCA_meta_df$PC2,color = pca_list$PCA_meta_df$Batch)
### PCA loadings and covariates
head(pca_list$PCA_meta_df)
head(pca_list$PCA_meta_df)
#### Data used: Normalised rld transformed count matrix of enhancer(peaks) in two tissues (synovial, blood) for juvenile arthritis patients
data(count_matrix)
data(meta_df)
### computing pca
pca_list = compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
### PCA loadings and covariates
pca_df = pca_list$PCA_meta_df
head(pca_df)
### PCAs and variability explained
percentVar = pca_list$perc_var
head(percentVar)
#### Plotting PCA
ggplot2::ggplot(data = pca_df , aes(x = PC1,y = PC2, color = Batch, shape =  Tissue, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar[1],2)), y = paste0("PC2, VarExp:", round(percentVar[2],2)))
library(ggplot2)
#### Data used: Normalised rld transformed count matrix of enhancer(peaks) in two tissues (synovial, blood) for juvenile arthritis patients
data(count_matrix)
data(meta_df)
### computing pca
pca_list = compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
### PCA loadings and covariates
pca_df = pca_list$PCA_meta_df
head(pca_df)
### PCAs and variability explained
percentVar = pca_list$perc_var
head(percentVar)
#### Plotting PCA
ggplot(data = pca_df , aes(x = PC1,y = PC2, color = Batch, shape =  Tissue, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar[1],2)), y = paste0("PC2, VarExp:", round(percentVar[2],2)))
### We can see most of the explained variation comes from batch effect and not from the tissues therefore removing the batch effect using function from limma
cleaned_count_matrix = limma::removeBatchEffect(count_matrix, batch = meta_df$Batch,design =  model.matrix( ~ meta_df$Tissue))
### Computimg pca and plotting using the above batch corrected data
pca_list.cleaned = compute_pca(data_mat = cleaned_count_matrix,ntop = 1000,meta_df = meta_df)
pca_list.cleaned = compute_pca(data_mat = cleaned_count_matrix,ntop = 1000,meta_df = meta_df)
pca_df.cleaned  = pca_list.cleaned$PCA_meta_df
percentVar.cleaned = pca_list.cleaned$perc_var
ggplot(data = pca_list.cleaned , aes(x = PC1,y = PC2, color = Batch, shape =  Tissue, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar.cleaned[1],2)), y = paste0("PC2, VarExp:", round(percentVar.cleaned[2],2)))
pca_list.cleaned = compute_pca(data_mat = cleaned_count_matrix,ntop = 1000,meta_df = meta_df)
pca_df.cleaned  = pca_list.cleaned$PCA_meta_df
percentVar.cleaned = pca_list.cleaned$perc_var
head(pca_df.cleaned )
head(pca_df)
ggplot(data = pca_df , aes(x = PC1,y = PC2, color = Batch, shape =  Tissue, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar[1],2)), y = paste0("PC2, VarExp:", round(percentVar[2],2)))
ggplot(data = pca_df.cleaned  , aes(x = PC1,y = PC2, color = Tissue, shape =  Tissue, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar.cleaned[1],2)), y = paste0("PC2, VarExp:", round(percentVar.cleaned[2],2)))
ggplot(data = pca_df.cleaned  , aes(x = PC1,y = PC2, color = Batch, shape =  Tissue, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar.cleaned[1],2)), y = paste0("PC2, VarExp:", round(percentVar.cleaned[2],2)))
ggplot(data = pca_df , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar[1],2)), y = paste0("PC2, VarExp:", round(percentVar[2],2)))
ggplot(data = pca_df.cleaned  , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar.cleaned[1],2)), y = paste0("PC2, VarExp:", round(percentVar.cleaned[2],2)))
names(meta_df)
?pca.correlogram
pca.correlogram
###### Another way to gte an overview of variation explained by different PCs and covariates is by use of correlogram.
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3,outdir = "", logTransform = TRUE)
devtools::load_all(".")
###### Another way to gte an overview of variation explained by different PCs and covariates is by use of correlogram.
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3, logTransform = TRUE)
devtools::load_all(".")
?pca.correlogram
devtools::load_all(".")
pca.correlogram
devtools::load_all(".")
devtools::load_all(".")
