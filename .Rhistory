draw_heatmap_top_peaks(data_mat = count_matrix,ntop = 1000,col_select = c("Tissue","Batch"),meta_df = meta_df,outfn = "~/Desktop/test.pdf",rownorm = FALSE)
load("/Users/daga/Documents/Projects/Autoimmune/JIA/RNA_seq/Process_with_merge/DE_result/JIA.SF_untreated_vs_HC.PBMC_untreated_de_result.RData")
maplot(res = res)
head(as.data.frame(res))
res$baseMean
plot(res$baseMean, res$log2FoldChange)
plot(res$baseMean, res$log2FoldChange,log="x")
? with
devtools::load_all(".")
maplot(res = res,thresh = 0.05)
devtools::load_all(".")
maplot(res = res,thresh = 0.05)
maplot(res = res,thresh = 0.05,labelsig = FALSE)
volcanoplot(res = res)
devtools::load_all(".")
volcanoplot(res = res)
head(res)
to_add_gene_symbol_ENSEMBL(input_ensembl_vector = c("ENSG00000279457"))
library(Usefn)
usethis::use_readme_md()
``` r
``` r
``` r
```
library(Usefn)
devtools::load_all(".")
?to_get_bed_df_peaks_from_peak_id_vector
library(Usefn)
vignette("Usefn_example", package="Usefn")
? vignette
vignette("Usefn_examples", package="Usefn")
vignette("Usefn_examples.pdf", package="Usefn")
%\VignetteIndexEntry{<Usefn Examples>}
%\VignetteIndexEntry{Usefn Examples}
library(Usefn)
vignette("Usefn_examples.pdf",package = Usefn)
vignette("Usefn_examples.pdf",package = "Usefn")
vignette(Usefn_examples,package = "Usefn")
library(Usefn)
knitr::opts_chunk$set(echo = TRUE)
load("/Users/daga/Documents/Projects/Autoimmune/JIA/RNA_seq/Process_with_merge/DE_result/HC.PBMC_treatment_HC.PBMC_notreatment_de_result.RData")
load("/Users/daga/Documents/Projects/Autoimmune/JIA/RNA_seq/Process_with_merge/DE_result/HC.PBMC_treatment_HC.PBMC_notreatment_de_result.RData")
meta_df =  as.data.frame(colData(rld))
data_orginal =  assay(rld)
data_orginal =  assay(rld)
load("/Users/daga/Documents/Projects/Autoimmune/JIA/dds_rld_objects/JIA_SFvsPBMC_ovelap2_with_nosummit_no_sex_stdchr.rda")
data_orginal =  assay(rld)
meta_df =  as.data.frame(colData(rld))
meta_df$Tissue = factor(meta_df$Tissue,levels = c("SF", "PB"))
meta_df = meta_df[,c("SampleID","Tissue","Condition")]
#all(colnames(data_orginal) == rownames(meta_df))
data_orginal = assay(rld)
count_matrix <- limma::removeBatchEffect(data_orginal, batch = meta_df$Batch,design =  model.matrix( ~ meta_df$Tissue))
View(meta_df)
View(meta_df)
meta_df =  as.data.frame(colData(rld))
meta_df$Tissue = factor(meta_df$Tissue,levels = c("SF", "PB"))
View(meta_df)
meta_df = meta_df[,c("SampleID","Tissue","Condition","Batch")]
View(meta_df)
data_orginal =  assay(rld)
hist(res$pvalue)
count_matrix =  assay(rld)
usethis::use_data(count_matrix)
usethis::use_data(meta_df)
usethis::use_data(res)
usethis::use_r(data)
usethis::use_r("data")
dim(count_matrix)
devtools::load_all(".")
usethis::use_data(as.data.frame(res))
res_df = as.data.frame(res)
usethis::use_data(res_df)
devtools::load_all(".")
devtools::load_all(".")
data("res_df")
data("count_matrix")
data("meta_df")
?meta_df
library(Usefn)
?meta_df
??count_matrix
??res_df
devtools::load_all(".")
?meta_df
?count_matrix
?res_df
devtools::load_all(".")
?res_df
usethis::use_vignette(name = "usefn_examples",title = "Usefn functions with examples")
library(Usefn)
enhancer1 = c("chr2:1002-1500","chr1:30000-38000","chr4:70000-78252")
enhancer2 = c("chr2:1100-1200","chr1:37655-38000" ,"chr4:50000-57122")
## To find overlap between two vectors of genomic coordinates
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = enhancer1,input_genomic_coord2 = enhancer2,input1_colname = "enhancer1",input2_colname ="enhancer2")
### To get bed format of genomic coordinates
to_get_bed_df_peaks_from_peak_id_vector(input_peak_id_vector = enhancer1)
?to_get_bed_df_peaks_from_peak_id_vector
library(Usefn)
enhancer1 = c("chr2:1002-1500","chr1:30000-38000","chr4:70000-78252")
enhancer2 = c("chr2:1100-1200","chr1:37655-38000" ,"chr4:50000-57122")
## To find overlap between two vectors of genomic coordinates
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = enhancer1,input_genomic_coord2 = enhancer2,input1_colname = "enhancer1",input2_colname ="enhancer2")
### To get bed format of genomic coordinates
to_get_bed_df_peaks_from_peak_id_vector(input_peak_id_vector = enhancer1,bed_file = FALSE,out_fn = "")
#### Data used: Normalised rld transformed count matrix of enhancer(peaks) in two tissues (synovial, blood) for juvenile arthritis patients
data(count_matrix)
data(meta_df)
### computing pca
pca_list = compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
### PCA loadings and covariates
head(pca_list$PCA_meta_df)
### PCAs and variability explained
head(pca_list$perc_var)
#### Plotting PCA
plot(pca_list$PCA_meta_df$PC1,pca_list$PCA_meta_df$PC2,color = pca_list$PCA_meta_df$Batch)
### PCA loadings and covariates
head(pca_list$PCA_meta_df)
head(pca_list$PCA_meta_df)
#### Data used: Normalised rld transformed count matrix of enhancer(peaks) in two tissues (synovial, blood) for juvenile arthritis patients
data(count_matrix)
data(meta_df)
### computing pca
pca_list = compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
### PCA loadings and covariates
pca_df = pca_list$PCA_meta_df
head(pca_df)
### PCAs and variability explained
percentVar = pca_list$perc_var
head(percentVar)
#### Plotting PCA
ggplot2::ggplot(data = pca_df , aes(x = PC1,y = PC2, color = Batch, shape =  Tissue, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar[1],2)), y = paste0("PC2, VarExp:", round(percentVar[2],2)))
library(ggplot2)
#### Data used: Normalised rld transformed count matrix of enhancer(peaks) in two tissues (synovial, blood) for juvenile arthritis patients
data(count_matrix)
data(meta_df)
### computing pca
pca_list = compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
### PCA loadings and covariates
pca_df = pca_list$PCA_meta_df
head(pca_df)
### PCAs and variability explained
percentVar = pca_list$perc_var
head(percentVar)
#### Plotting PCA
ggplot(data = pca_df , aes(x = PC1,y = PC2, color = Batch, shape =  Tissue, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar[1],2)), y = paste0("PC2, VarExp:", round(percentVar[2],2)))
### We can see most of the explained variation comes from batch effect and not from the tissues therefore removing the batch effect using function from limma
cleaned_count_matrix = limma::removeBatchEffect(count_matrix, batch = meta_df$Batch,design =  model.matrix( ~ meta_df$Tissue))
### Computimg pca and plotting using the above batch corrected data
pca_list.cleaned = compute_pca(data_mat = cleaned_count_matrix,ntop = 1000,meta_df = meta_df)
pca_list.cleaned = compute_pca(data_mat = cleaned_count_matrix,ntop = 1000,meta_df = meta_df)
pca_df.cleaned  = pca_list.cleaned$PCA_meta_df
percentVar.cleaned = pca_list.cleaned$perc_var
ggplot(data = pca_list.cleaned , aes(x = PC1,y = PC2, color = Batch, shape =  Tissue, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar.cleaned[1],2)), y = paste0("PC2, VarExp:", round(percentVar.cleaned[2],2)))
pca_list.cleaned = compute_pca(data_mat = cleaned_count_matrix,ntop = 1000,meta_df = meta_df)
pca_df.cleaned  = pca_list.cleaned$PCA_meta_df
percentVar.cleaned = pca_list.cleaned$perc_var
head(pca_df.cleaned )
head(pca_df)
ggplot(data = pca_df , aes(x = PC1,y = PC2, color = Batch, shape =  Tissue, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar[1],2)), y = paste0("PC2, VarExp:", round(percentVar[2],2)))
ggplot(data = pca_df.cleaned  , aes(x = PC1,y = PC2, color = Tissue, shape =  Tissue, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar.cleaned[1],2)), y = paste0("PC2, VarExp:", round(percentVar.cleaned[2],2)))
ggplot(data = pca_df.cleaned  , aes(x = PC1,y = PC2, color = Batch, shape =  Tissue, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar.cleaned[1],2)), y = paste0("PC2, VarExp:", round(percentVar.cleaned[2],2)))
ggplot(data = pca_df , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar[1],2)), y = paste0("PC2, VarExp:", round(percentVar[2],2)))
ggplot(data = pca_df.cleaned  , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar.cleaned[1],2)), y = paste0("PC2, VarExp:", round(percentVar.cleaned[2],2)))
names(meta_df)
?pca.correlogram
pca.correlogram
###### Another way to gte an overview of variation explained by different PCs and covariates is by use of correlogram.
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3,outdir = "", logTransform = TRUE)
devtools::load_all(".")
###### Another way to gte an overview of variation explained by different PCs and covariates is by use of correlogram.
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3, logTransform = TRUE)
devtools::load_all(".")
?pca.correlogram
devtools::load_all(".")
pca.correlogram
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(Usefn)
library(Usefn)
library(ggplot2)
enhancer1 = c("chr2:1002-1500","chr1:30000-38000","chr4:70000-78252")
enhancer2 = c("chr2:1100-1200","chr1:37655-38000" ,"chr4:50000-57122")
## To find overlap between two vectors of genomic coordinates
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = enhancer1,input_genomic_coord2 = enhancer2,input1_colname = "enhancer1",input2_colname ="enhancer2")
### To get bed format of genomic coordinates
to_get_bed_df_peaks_from_peak_id_vector(input_peak_id_vector = enhancer1,bed_file = FALSE,out_fn = "")
library(Usefn)
library(ggplot2)
enhancer1 = c("chr2:1002-1500","chr1:30000-38000","chr4:70000-78252")
enhancer2 = c("chr2:1100-1200","chr1:37655-38000" ,"chr4:50000-57122")
## To find overlap between two vectors of genomic coordinates
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = enhancer1,input_genomic_coord2 = enhancer2,input1_colname = "enhancer1",input2_colname ="enhancer2")
### To get bed format of genomic coordinates
to_get_bed_df_peaks_from_peak_id_vector(input_peak_id_vector = enhancer1,bed_file = FALSE,out_fn = "")
#### Data used: Normalised rld transformed count matrix of enhancer(peaks) in two tissues (synovial, blood) for juvenile arthritis patients
data(count_matrix)
data(meta_df)
### computing pca
pca_list = compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
#### Data used: Normalised rld transformed count matrix of enhancer(peaks) in two tissues (synovial, blood) for juvenile arthritis patients
data(count_matrix)
data(meta_df)
### computing pca
pca_list = compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
devtools::load_all(".")
ompute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
#### Data used: Normalised rld transformed count matrix of enhancer(peaks) in two tissues (synovial, blood) for juvenile arthritis patients
data(count_matrix)
data(meta_df)
### computing pca
pca_list = compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
### PCA loadings and covariates
pca_df = pca_list$PCA_meta_df
head(pca_df)
### PCAs and variability explained
percentVar = pca_list$perc_var
head(percentVar)
#### Plotting PCA
ggplot(data = pca_df , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar[1],2)), y = paste0("PC2, VarExp:", round(percentVar[2],2)), title = "Original Data")
### We can see most of the explained PC1 variation comes from batch effect and not from the tissues therefore removing the batch effect using function from limma
cleaned_count_matrix = limma::removeBatchEffect(count_matrix, batch = meta_df$Batch,design =  model.matrix( ~ meta_df$Tissue))
### Computimg pca and plotting using the above batch corrected data
pca_list.cleaned = compute_pca(data_mat = cleaned_count_matrix,ntop = 1000,meta_df = meta_df)
pca_df.cleaned  = pca_list.cleaned$PCA_meta_df
percentVar.cleaned = pca_list.cleaned$perc_var
ggplot(data = pca_df.cleaned  , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar.cleaned[1],2)), y = paste0("PC2, VarExp:", round(percentVar.cleaned[2],2)),title = "Cleaned Data")
###### Another way to gte an overview of variation explained by different PCs and covariates is by use of correlogram
### This functions also show the distribution of counts for different samples
##pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3, logTransform = TRUE)
#### Data used: Normalised rld transformed count matrix of enhancer(peaks) in two tissues (synovial, blood) for juvenile arthritis patients
data(count_matrix)
data(meta_df)
### computing pca
pca_list = compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
### PCA loadings and covariates
pca_df = pca_list$PCA_meta_df
head(pca_df)
### PCAs and variability explained
percentVar = pca_list$perc_var
head(percentVar)
#### Plotting PCA
ggplot(data = pca_df , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar[1],2)), y = paste0("PC2, VarExp:", round(percentVar[2],2)), title = "Original Data")
### We can see most of the explained PC1 variation comes from batch effect and not from the tissues therefore removing the batch effect using function from limma
cleaned_count_matrix = limma::removeBatchEffect(count_matrix, batch = meta_df$Batch,design =  model.matrix( ~ meta_df$Tissue))
### Computimg pca and plotting using the above batch corrected data
pca_list.cleaned = compute_pca(data_mat = cleaned_count_matrix,ntop = 1000,meta_df = meta_df)
pca_df.cleaned  = pca_list.cleaned$PCA_meta_df
percentVar.cleaned = pca_list.cleaned$perc_var
ggplot(data = pca_df.cleaned  , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar.cleaned[1],2)), y = paste0("PC2, VarExp:", round(percentVar.cleaned[2],2)),title = "Cleaned Data")
###### Another way to gte an overview of variation explained by different PCs and covariates is by use of correlogram
### This functions also show the distribution of counts for different samples
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3, logTransform = TRUE)
library(Usefn)
library(Usefn)
library(ggplot2)
enhancer1 = c("chr2:1002-1500","chr1:30000-38000","chr4:70000-78252")
enhancer2 = c("chr2:1100-1200","chr1:37655-38000" ,"chr4:50000-57122")
## To find overlap between two vectors of genomic coordinates
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = enhancer1,input_genomic_coord2 = enhancer2,input1_colname = "enhancer1",input2_colname ="enhancer2")
### To get bed format of genomic coordinates
to_get_bed_df_peaks_from_peak_id_vector(input_peak_id_vector = enhancer1,bed_file = FALSE,out_fn = "")
#### Data used: Normalised rld transformed count matrix of enhancer(peaks) in two tissues (synovial, blood) for juvenile arthritis patients
data(count_matrix)
data(meta_df)
### computing pca
pca_list = compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
### PCA loadings and covariates
pca_df = pca_list$PCA_meta_df
head(pca_df)
### PCAs and variability explained
percentVar = pca_list$perc_var
head(percentVar)
#### Plotting PCA
ggplot(data = pca_df , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar[1],2)), y = paste0("PC2, VarExp:", round(percentVar[2],2)), title = "Original Data")
### We can see most of the explained PC1 variation comes from batch effect and not from the tissues therefore removing the batch effect using function from limma
cleaned_count_matrix = limma::removeBatchEffect(count_matrix, batch = meta_df$Batch,design =  model.matrix( ~ meta_df$Tissue))
### Computimg pca and plotting using the above batch corrected data
pca_list.cleaned = compute_pca(data_mat = cleaned_count_matrix,ntop = 1000,meta_df = meta_df)
pca_df.cleaned  = pca_list.cleaned$PCA_meta_df
percentVar.cleaned = pca_list.cleaned$perc_var
ggplot(data = pca_df.cleaned  , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar.cleaned[1],2)), y = paste0("PC2, VarExp:", round(percentVar.cleaned[2],2)),title = "Cleaned Data")
###### Another way to get an overview of variation explained by different PCs and covariates is by use of correlogram
### This functions also show the distribution of counts for different samples
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3, logTransform = TRUE)
devtools::load_all(".")
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3, logTransform = TRUE)
#### Data used: Normalised rld transformed count matrix of enhancer(peaks) in two tissues (synovial, blood) for juvenile arthritis patients
data(count_matrix)
data(meta_df)
### computing pca
pca_list = compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
### PCA loadings and covariates
pca_df = pca_list$PCA_meta_df
head(pca_df)
### PCAs and variability explained
percentVar = pca_list$perc_var
head(percentVar)
#### Plotting PCA
ggplot(data = pca_df , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar[1],2)), y = paste0("PC2, VarExp:", round(percentVar[2],2)), title = "Original Data")
### We can see most of the explained PC1 variation comes from batch effect and not from the tissues therefore removing the batch effect using function from limma
cleaned_count_matrix = limma::removeBatchEffect(count_matrix, batch = meta_df$Batch,design =  model.matrix( ~ meta_df$Tissue))
### Computimg pca and plotting using the above batch corrected data
pca_list.cleaned = compute_pca(data_mat = cleaned_count_matrix,ntop = 1000,meta_df = meta_df)
pca_df.cleaned  = pca_list.cleaned$PCA_meta_df
percentVar.cleaned = pca_list.cleaned$perc_var
ggplot(data = pca_df.cleaned  , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar.cleaned[1],2)), y = paste0("PC2, VarExp:", round(percentVar.cleaned[2],2)),title = "Cleaned Data")
###### Another way to get an overview of variation explained by different PCs and covariates is by use of correlogram
### This functions also show the distribution of counts for different samples
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3, logTransform = TRUE)
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3, logTransform = TRUE)
devtools::load_all(".")
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3, logTransform = TRUE)
#### Data used: Normalised rld transformed count matrix of enhancer(peaks) in two tissues (synovial, blood) for juvenile arthritis patients
data(count_matrix)
data(meta_df)
### computing pca
pca_list = compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
### PCA loadings and covariates
pca_df = pca_list$PCA_meta_df
head(pca_df)
### PCAs and variability explained
percentVar = pca_list$perc_var
head(percentVar)
#### Plotting PCA
ggplot(data = pca_df , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar[1],2)), y = paste0("PC2, VarExp:", round(percentVar[2],2)), title = "Original Data")
### We can see most of the explained PC1 variation comes from batch effect and not from the tissues therefore removing the batch effect using function from limma
cleaned_count_matrix = limma::removeBatchEffect(count_matrix, batch = meta_df$Batch,design =  model.matrix( ~ meta_df$Tissue))
### Computimg pca and plotting using the above batch corrected data
pca_list.cleaned = compute_pca(data_mat = cleaned_count_matrix,ntop = 1000,meta_df = meta_df)
pca_df.cleaned  = pca_list.cleaned$PCA_meta_df
percentVar.cleaned = pca_list.cleaned$perc_var
ggplot(data = pca_df.cleaned  , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar.cleaned[1],2)), y = paste0("PC2, VarExp:", round(percentVar.cleaned[2],2)),title = "Cleaned Data")
###### Another way to get an overview of variation explained by different PCs and covariates is by use of correlogram
### This functions also show the distribution of counts for different samples
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3, logTransform = TRUE)
density(log2(count_matrix+1), na.rm = TRUE)
head(count_matrix)
density(count_matrix[,1]+1)
plot(density(log2(count_matrix[,1]+1)))
apply(log2(count_matrix+1), 2, function(x) density(x, na.rm = TRUE))
devtools::load_all(".")
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3, logTransform = TRUE)
devtools::load_all(".")
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3, logTransform = TRUE)
densPlot <- function() {
dens <- apply(count_matrix, 2, density)
plot(NA, xlim=range(sapply(dens, "[", "x")), ylim=range(sapply(dens, "[", "y")))
mapply(lines, dens, col=1:length(dens))
densPlot <- function() {
dens <- apply(count_matrix, 2, density)
plot(NA, xlim=range(sapply(dens, "[", "x")), ylim=range(sapply(dens, "[", "y")))
mapply(lines, dens, col=1:length(dens)) }
a = densPlot()
a$JIA_A_SF_Run1
a
a = densPlot()
devtools::load_all(".")
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3, logTransform = TRUE)
#### Data used: Normalised rld transformed count matrix of enhancer(peaks) in two tissues (synovial, blood) for juvenile arthritis patients
data(count_matrix)
data(meta_df)
### computing pca
pca_list = compute_pca(data_mat = count_matrix,ntop = 1000,meta_df = meta_df)
### PCA loadings and covariates
pca_df = pca_list$PCA_meta_df
head(pca_df)
### PCAs and variability explained
percentVar = pca_list$perc_var
head(percentVar)
#### Plotting PCA
ggplot(data = pca_df , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar[1],2)), y = paste0("PC2, VarExp:", round(percentVar[2],2)), title = "Original Data")
### We can see most of the explained PC1 variation comes from batch effect and not from the tissues therefore removing the batch effect using function from limma
cleaned_count_matrix = limma::removeBatchEffect(count_matrix, batch = meta_df$Batch,design =  model.matrix( ~ meta_df$Tissue))
### Computimg pca and plotting using the above batch corrected data
pca_list.cleaned = compute_pca(data_mat = cleaned_count_matrix,ntop = 1000,meta_df = meta_df)
pca_df.cleaned  = pca_list.cleaned$PCA_meta_df
percentVar.cleaned = pca_list.cleaned$perc_var
ggplot(data = pca_df.cleaned  , aes(x = PC1,y = PC2, color = Tissue, shape =  Batch, size = 3)) + geom_point() +
labs(x = paste0("PC1, VarExp:", round(percentVar.cleaned[1],2)), y = paste0("PC2, VarExp:", round(percentVar.cleaned[2],2)),title = "Cleaned Data")
###### Another way to get an overview of variation explained by different PCs and covariates is by use of correlogram
### This functions also show the distribution of counts for different samples
pca.correlogram(count_matrix = count_matrix,ntop = 1000,metadata = meta_df,covs = c("Tissue","Batch"),scale = TRUE,pcCount = 3, logTransform = TRUE)
library(Usefn)
devtools::load_all(".")
library(Usefn)
library(ggplot2)
enhancer1 = c("chr2:1002-1500","chr1:30000-38000","chr4:70000-78252")
enhancer2 = c("chr2:1100-1200","chr1:37655-38000" ,"chr4:50000-57122")
## To find overlap between two vectors of genomic coordinates
to_get_overlap_bw_gr_from_peakids(input_genomic_coord1 = enhancer1,input_genomic_coord2 = enhancer2,input1_colname = "enhancer1",input2_colname ="enhancer2")
### To get bed format of genomic coordinates
to_get_bed_df_peaks_from_peak_id_vector(input_peak_id_vector = enhancer1,bed_file = FALSE,out_fn = "")
#### Hetmap of count data based clustering of top variable features
draw_heatmap_top_peaks(data_mat = count_matrix,ntop = 1000,col_select = c("Tissue","Batch"),meta_df = meta_df,rownorm = FALSE)
devtools::load_all(".")
#### Hetmap of count data based clustering of top variable features
draw_heatmap_top_peaks(data_mat = count_matrix,ntop = 1000,col_select = c("Tissue","Batch"),meta_df = meta_df,rownorm = FALSE)
devtools::load_all(".")
#### Hetmap of count data based clustering of top variable features
draw_heatmap_top_peaks(data_mat = count_matrix,ntop = 1000,col_select = c("Tissue","Batch"),meta_df = meta_df,rownorm = FALSE)
head(res_df,n = 3)
head(res_df,n = 10)
head(res_df,n = 4)
### Diagnostic Volcano plot by labelling significant genes
volcanoplot(res = res_df,lfcthresh = 3,sigthresh = .001,labelsig = TRUE)
### Diagnostic Volcano plot by labelling significant genes
volcanoplot(res = res_df,lfcthresh = 4,sigthresh = .0001,labelsig = TRUE)
### Diagnostic Volcano plot by labelling significant genes
volcanoplot(res = res_df,lfcthresh = 5,sigthresh = .0001,labelsig = TRUE)
### Diagnostic Volcano plot by labelling significant genes
volcanoplot(res = res_df,lfcthresh = 3,sigthresh = .0001,labelsig = TRUE)
### Diagnostic Volcano plot by labelling significant genes with different cols
volcanoplot(res = res_df,lfcthresh = 3,sigthresh = .0001)
sapply(X = rownames(res_df),FUN = modify_string,delimtter = ".",position = 1,USE.NAMES = FALSE)
rownames(res_df)
modify_string
?strsplit
devtools::load_all(".")
sapply(X = rownames(res_df),FUN = modify_string,delimtter = ".",position = 1,USE.NAMES = FALSE)
res_df$ENSEMBL = sapply(X = rownames(res_df),FUN = modify_string,delimtter = ".",position = 1,USE.NAMES = FALSE)
head(res_df, n = 4)
devtools::load_all(".")
###### Map ENSENL ids to gene symbol
ensembl <- biomaRt::useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
gene_mapping_df = to_add_gene_symbol_ENSEMBL(input_ensembl_vector = res_df$ENSEMBL,ensembl_biomart = ensembl)
head(gene_mapping_df)
maplot(res = res_df,thresh = 0.001,labelsig = FALSE)
res_df[res_df$padj <= 0.01,"ENSEMBL"]
diff_genes
res_df[res_df$padj <= 0.01,"ENSEMBL"]
diff_genes = res_df[res_df$padj <= 0.01,"ENSEMBL"]
diff_genes = diff_genes[!(is.na(diff_genes))]
diff_genes
head(gene_mapping_df)
#### Performing GO and kegg enrichment analysis with significantly differential genes
diff_genes = res_df[res_df$padj <= 0.01,"ENSEMBL"]
diff_genes = diff_genes[!(is.na(diff_genes))]
gene_mapping_df[match(diff_genes,gene_mapping_df$ensembl_gene_id),"entrezgene_id"]
GO_kegg_df = to_get_GO_kegg_enrichment(expressedTarget = diff_genes_entrez,expressedGenes = unique(gene_mapping_df$entrezgene_id))
devtools::load_all(".")
diff_genes_entrez
###### Map ENSEMBL ids to gene symbol
ensembl <- biomaRt::useEnsembl(biomart = "ensembl", dataset = "hsapiens_gene_ensembl")
gene_mapping_df = to_add_gene_symbol_ENSEMBL(input_ensembl_vector = res_df$ENSEMBL,ensembl_biomart = ensembl)
head(gene_mapping_df)
#### Performing GO and kegg enrichment analysis with significantly differential genes
diff_genes = res_df[res_df$padj <= 0.01,"ENSEMBL"]
diff_genes = diff_genes[!(is.na(diff_genes))]
diff_genes_entrez = gene_mapping_df[match(diff_genes,gene_mapping_df$ensembl_gene_id),"entrezgene_id"]
GO_kegg_df = to_get_GO_kegg_enrichment(expressedTarget = diff_genes_entrez,expressedGenes = unique(gene_mapping_df$entrezgene_id))
GO_df = GO_kegg_df[[1]]
kegg_df = GO_kegg_df[[2]]
head(GO_df)
head(kegg_df)
devtools::load_all(".")
head(gene_mapping_df)
#### Performing GO and kegg enrichment analysis with significantly differential genes
diff_genes = res_df[res_df$padj <= 0.01,"ENSEMBL"]
diff_genes = diff_genes[!(is.na(diff_genes))]
diff_genes_entrez = gene_mapping_df[match(diff_genes,gene_mapping_df$ensembl_gene_id),"entrezgene_id"]
GO_kegg_df = to_get_GO_kegg_enrichment(expressedTarget = diff_genes_entrez,expressedGenes = unique(gene_mapping_df$entrezgene_id))
GO_df = GO_kegg_df[[1]]
kegg_df = GO_kegg_df[[2]]
to_get_GO_kegg_enrichment(expressedTarget = diff_genes_entrez,expressedGenes = unique(gene_mapping_df$entrezgene_id))
clusterProfiler::dotplot
enrichplot::dotplot()
?dotplot
devtools::load_all(".")
GO_kegg_df = to_get_GO_kegg_enrichment(expressedTarget = diff_genes_entrez,expressedGenes = unique(gene_mapping_df$entrezgene_id))
to_get_GO_kegg_enrichment(expressedTarget = diff_genes_entrez,expressedGenes = unique(gene_mapping_df$entrezgene_id))
devtools::load_all(".")
to_get_GO_kegg_enrichment(expressedTarget = diff_genes_entrez,expressedGenes = unique(gene_mapping_df$entrezgene_id))
head(gene_mapping_df)
#### Performing GO and kegg enrichment analysis with significantly differential genes
diff_genes = res_df[res_df$padj <= 0.01,"ENSEMBL"]
diff_genes = diff_genes[!(is.na(diff_genes))]
diff_genes_entrez = gene_mapping_df[match(diff_genes,gene_mapping_df$ensembl_gene_id),"entrezgene_id"]
GO_kegg_df = to_get_GO_kegg_enrichment(expressedTarget = diff_genes_entrez,expressedGenes = unique(gene_mapping_df$entrezgene_id))
GO_df = GO_kegg_df[[1]]
kegg_df = GO_kegg_df[[2]]
head(GO_df, n= 3)
head(kegg_df, n = 3)
library(Usefn)
library(Usefn)
library(Usefn)
detach("package:Usefn", unload = TRUE)
install.packages("~/Documents/Projects/Universal_scripts/Package/R/Usefn_1.0.0.tar.gz", repos = NULL, type = "source")
help(package = "Usefn")
help(package = "Usefn")
